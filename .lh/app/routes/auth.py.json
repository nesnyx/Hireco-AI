{
    "sourceFile": "app/routes/auth.py",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1757601967377,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1757602155764,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,16 +31,13 @@\n     id: int\n     email: str\n     role: str\n \n-    class Config:\n-        orm_mode = True\n \n-\n @auth_router.post(\"/login\")\n async def login(login_input: LoginInput, db: Session = Depends(get_db)):\n     user = db.query(Accounts).filter(Accounts.email == login_input.email).first()\n-    prin\n+    print(user)\n     if not user:\n         raise HTTPException(status_code=401, detail=\"Invalid email or password\")\n     if user.password != login_input.password:\n         raise HTTPException(status_code=401, detail=\"Invalid email or password\")\n"
                },
                {
                    "date": 1757602164771,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,9 +94,9 @@\n     token = generate_token(payload)\n     return {\"token\": token, \"token_type\": \"bearer\"}\n \n \n-@auth_router.get(\"/me\",response_model=UserResponse)\n+@auth_router.get(\"/me\")\n async def me(current_user=Depends(get_current_user)):\n     return current_user[\"data\"]\n \n @auth_router.get(\"/logout\")\n"
                },
                {
                    "date": 1758545874533,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -42,9 +42,9 @@\n     if user.password != login_input.password:\n         raise HTTPException(status_code=401, detail=\"Invalid email or password\")\n     payload = {\"id\": user.id}\n     token = generate_token(payload)\n-    return {\"token\": token, \"token_type\": \"bearer\",\"role\"}\n+    return {\"token\": token, \"token_type\": \"bearer\",\"role\":}\n \n \n @auth_router.post(\"/register\")\n async def register(register_input: RegisterInput, db: Session = Depends(get_db)):\n"
                },
                {
                    "date": 1759472681017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,13 @@\n \n @auth_router.get(\"/me\")\n async def me(current_user=Depends(get_current_user)):\n     return {\n-        \n+        \"id\": current_user.id,\n+        \"email\": current_user.email,\n+        \"role\": current_user.role,\n+        \"profile\": json.loads(current_user.profile) if current_user.profile else {},\n+        \"created_at\": current_user.created_at,\n     }\n \n @auth_router.get(\"/logout\")\n async def logout():\n"
                }
            ],
            "date": 1757601967377,
            "name": "Commit-0",
            "content": "from fastapi import (\n    Depends,\n    HTTPException,\n    APIRouter,\n)\nfrom pydantic import BaseModel\nfrom app.ai.service.db import Accounts, get_db\nfrom sqlalchemy.orm import Session\nfrom app.utils.jwt import generate_token, get_current_user\nimport logging\nimport json\n\nlogger = logging.getLogger(__name__)\n\nauth_router = APIRouter(prefix=\"/auth\")\n\n\nclass RegisterInput(BaseModel):\n    email: str\n    password: str\n    role: str\n    full_name: str\n\n\nclass LoginInput(BaseModel):\n    email: str\n    password: str\n\n\nclass UserResponse(BaseModel):\n    id: int\n    email: str\n    role: str\n\n    class Config:\n        orm_mode = True\n\n\n@auth_router.post(\"/login\")\nasync def login(login_input: LoginInput, db: Session = Depends(get_db)):\n    user = db.query(Accounts).filter(Accounts.email == login_input.email).first()\n    prin\n    if not user:\n        raise HTTPException(status_code=401, detail=\"Invalid email or password\")\n    if user.password != login_input.password:\n        raise HTTPException(status_code=401, detail=\"Invalid email or password\")\n    payload = {\"id\": user.id}\n    token = generate_token(payload)\n    return {\"token\": token, \"token_type\": \"bearer\"}\n\n\n@auth_router.post(\"/register\")\nasync def register(register_input: RegisterInput, db: Session = Depends(get_db)):\n    existing_user = (\n        db.query(Accounts).filter(Accounts.email == register_input.email).first()\n    )\n    if existing_user:\n        raise HTTPException(status_code=400, detail=\"Email already registered\")\n\n    profile_data = {\n        \"full_name\": register_input.full_name,\n        \"phone\": \"\",\n        \"address\": \"\",\n        \"bio\": \"\",\n        \"social_media\": {},\n    }\n    new_user = Accounts(\n        email=register_input.email,\n        password=register_input.password,\n        role=register_input.role,  # bisa \"user\", \"admin\", dll\n        profile=json.dumps(profile_data),\n    )\n    db.add(new_user)\n    db.commit()\n    db.refresh(new_user)\n\n    return {\n        \"success\": True,\n        \"message\": \"User registered successfully\",\n        \"user\": {\n            \"id\": new_user.id,\n            \"email\": new_user.email,\n            \"role\": new_user.role,\n            \"created_at\": new_user.created_at,\n        },\n    }\n\n\n@auth_router.post(\"/user/login\")\nasync def user_login(login_input: LoginInput, db: Session = Depends(get_db)):\n    user = db.query(Accounts).filter(Accounts.email == login_input.email).first()\n    if not user:\n        raise HTTPException(status_code=401, detail=\"Invalid email or password\")\n    if user.password != login_input.password:\n        raise HTTPException(status_code=401, detail=\"Invalid email or password\")\n    payload = {\"id\": user.id}\n    token = generate_token(payload)\n    return {\"token\": token, \"token_type\": \"bearer\"}\n\n\n@auth_router.get(\"/me\",response_model=UserResponse)\nasync def me(current_user=Depends(get_current_user)):\n    return current_user[\"data\"]\n\n@auth_router.get(\"/logout\")\nasync def logout():\n    pass\n"
        }
    ]
}